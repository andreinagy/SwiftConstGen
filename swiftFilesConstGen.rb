#!/usr/bin/env ruby
#
# The MIT License (MIT)
#
# Andrei Nagy 2018-08-14
#
# Copyright (c) 2018 Andrei Nagy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

require 'optparse'

SCRIPT_NAME = "swiftFilesConstGen"

def printUsage() 
    """
Generate a constants file form files names.
Example:

./" + SCRIPT_NAME + " -i path/to/files -o output/path -e json -n JSONFiles

will create JSONMocks-generated.swift.

"""
end

# This will hold the options we parse
options = {}

OptionParser.new do |parser|
parser.banner = "Usage: hello.rb [options]"
  
  parser.on("-i", "--input Directory", "The directory containing input files.") do |v|
    options[:input] = v
  end
  parser.on("-o", "--output Directory", "The for the output constants file.") do |v|
    options[:output] = v
  end
  parser.on("-e", "--extension Files Extension", "The extensions of the files to search for.") do |v|
    options[:extension] = v
  end
  parser.on("-n", "--name Struct Name", "The name for the sturct to use.") do |v|
    options[:struct_name] = v
  end
  parser.on("-h", "--help", "Print help.") do ||
    puts printUsage()
    puts parser

  end
end.parse!
# parser.end

expected_keys = [:input, :extension, :struct_name]
missing_keys = expected_keys - options.keys
    # If you just want to see if there are any missing keys:
unless (expected_keys - options.keys).empty?
    puts printUsage()
    exit 0
end

def runCommand(string)
    result = %x[ #{string} ]
end

def findFiles(directory, extension)
    # result = `#{}`
    cmd = "find " + directory + " -name \"*." + extension + "\" |sort |sed 's#.*/##'"
    runCommand(cmd)
end

files = findFiles(options[:input], options[:extension]).split("\n")

def validSwiftIdentifier(string)
    result = string

    unless result[0] =~ /[[:alpha:]]/
        result = "a_" + result
    end

    result = result.gsub(/[^0-9a-z]/i, "_")
    result = result.downcase.split.join('_')
    result = result.split('_').collect(&:capitalize).join
    result[0] = result[0].downcase
    result
end

filesStrings = files.map do |file|
    fileWithoutExtension = File.basename(file, File.extname(file))
    identifier = validSwiftIdentifier(fileWithoutExtension)
    "static let " + identifier + " = \"" + fileWithoutExtension + "\""
end

require 'erb'
template = """// Generated by "+ SCRIPT_NAME + "
// Input directory: " + options[:input] + "
// Files extension: " + options[:extension] + "
// Struct name: " + options[:struct_name] + "
// Do not modify manually

// swiftlint:disable all
struct " + options[:struct_name] + " {

    static let fileExtension = \"" + options[:extension] + "\"
    <% filesStrings.each do |file| %>
    <%= file %><% end %>

}
// swiftlint:enable all
"""
output = ERB.new(template).result()


if options[:output] 
    fileName = options[:output] + options[:struct_name] + "-generated.swift"
    File.open(fileName, 'w') { |file| file.write(output) }
else
    puts output
end